# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 2.8.11)

# Project name
project(unit_test)

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

set(CONFIGURATION_NAME "Debug")

set(CL_WORKSPACE_DIRECTORY ..)
# Set default locations
set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/${CL_WORKSPACE_DIRECTORY}/cmake-build-${CONFIGURATION_NAME}/output)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})

# Projects


# Top project
## Add the dependencies
add_subdirectory(${CMAKE_SOURCE_DIR}/../z ${CMAKE_CURRENT_BINARY_DIR}/z-build)
add_subdirectory(${CMAKE_SOURCE_DIR}/../znz ${CMAKE_CURRENT_BINARY_DIR}/znz-build)
add_subdirectory(${CMAKE_SOURCE_DIR}/../nifti ${CMAKE_CURRENT_BINARY_DIR}/nifti-build)
# Define some variables
set(PROJECT_unit_test_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(WORKSPACE_PATH "${CMAKE_CURRENT_LIST_DIR}/..")



#{{{{ User Code 1
# Place your code here
#}}}}

include_directories(
    .
    ..
    ../../
    .
    ${WORKSPACE_PATH}/z
    ${WORKSPACE_PATH}/znz/include
    ${WORKSPACE_PATH}/nifti/include
    .

)


# Compiler options
add_definitions(-DHAVE_ZLIB)
add_definitions(--std=gnu++17)
add_definitions(-g)
add_definitions(-O0)
add_definitions(-Wall)
add_definitions(
    -DHAVE_ZLIB
)


# Linker options
set(LINK_OPTIONS -lm)
set(LINK_OPTIONS ${LINK_OPTIONS} -lz)
set(LINK_OPTIONS ${LINK_OPTIONS} -lznz)
set(LINK_OPTIONS ${LINK_OPTIONS} )
set(LINK_OPTIONS ${LINK_OPTIONS} -g)
set(LINK_OPTIONS ${LINK_OPTIONS} -O0)
set(LINK_OPTIONS ${LINK_OPTIONS} -Wall)


if(WIN32)
    # Resource options
endif(WIN32)

# Library path
link_directories(
    .
    ${WORKSPACE_PATH}/cmake-build-${CONFIGURATION_NAME}/output
)

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/src/unit_test.cpp
)

set_source_files_properties(
    ${CXX_SRCS} PROPERTIES COMPILE_FLAGS 
    " -DHAVE_ZLIB --std=gnu++17 -g -O0 -Wall")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(unit_test ${RC_SRCS} ${CXX_SRCS} ${C_SRCS})
target_link_libraries(unit_test ${LINK_OPTIONS})


# Adding dependencies
add_dependencies(unit_test z)
add_dependencies(unit_test znz)
add_dependencies(unit_test nifti)


#{{{{ User Code 3
# Place your code here
#}}}}

